@{
    book_vs19Entities1 bullshit = new book_vs19Entities1();

    Reader_Card[] cr = bullshit.Reader_Card.ToArray();
    var ReaderCard = from card in bullshit.Reader_Card join user in bullshit.User_sus on card.User_ID equals user.Id select new
    {
        card.Personel_ID_Card,
        card.Birthday,
        card.Birtpalace,
        card.Momname,
        card.home,
        user.Username,
        user.phone,
        user.email,
        user.Id
    };
}
<div style="height:100px"></div>
<header>
    <h1 class="float-end text-white">
        Jelenleg: Taglista
    </h1>
</header>
<table class="table table-hover table-responsive table-bordered text-center justify-content-center">
    <thead class="bg-warning">
    <tr>
    <td>Személyi</td>
    <td>Név</td>
    <td>Anyja neve</td>
    <td>Születési dátum</td>
    <td>Születési hely</td>
    <td>Lakcím</td>
    <td>Tell</td>
    <td>E-mail cím</td>

    </tr>
    </thead>
    <tbody class="bg-white ">
        @foreach (var item in ReaderCard)
        {
        <tr onclick="gotoprofile(this.getElementsByTagName('td')[0].getElementsByTagName('input')[0].value)">
            <td style="display:none">
                <input value="@item.Id" readonly>
            </td>
            
            <td>@item.Personel_ID_Card</td>
            <td>@item.Username</td>
            <td>@item.Momname</td>
            <td>@item.Birthday</td>
            <td>@item.Birtpalace</td>
            <td>@item.home</td>
            <td>@item.phone</td>
            <td>@item.email</td>
        </tr>
    }
        </tbody>
    </table>



<script>
    function gotoprofile(adat) {
        console.log(adat);
        $.ajax({
            url: "/Default/SetSession",
            type: "POST",
            data: { 'name': "cur_user", 'value': adat },
            success: function () { window.location.href = "/Default/profilepage"; },
            error: function () { alert("error"); }
        });
    }
             var all_Reader = []
            @foreach (var item in cr)
            {
                string varrrr = $"{item.Personel_ID_Card}";

               @:{ all_Reader.push("@varrrr.Trim()") };
            }
        //function autocomplete(inp, arr) {
        //    console.log("fsdf")
        //    /*the autocomplete function takes two arguments,
        //the text field element and an array of possible autocompleted values:*/
        //    var currentFocus;
        //    /*execute a function when someone writes in the text field:*/
        //    inp.addEventListener("input", function (e) {
        //        var container, items, i, val = this.value;
        //        /*close any already open lists of autocompleted values*/
        //        closeAllLists();
        //        if (!val) { return false; }
        //        currentFocus = -1;
        //        /*create a DIV element that will contain the items (values):*/
        //        container = document.createElement("DIV");
        //        container.setAttribute("id", this.id + "autocomplete-list");
        //        container.setAttribute("class", "autocomplete-items");



        //        container.classList.add("text-dark");
        //        container.classList.add("dropdown");
        //        container.classList.add("show");

        //        // Get the input field
        //        var inputField = $("#"+inp.id);

        //        // Get the vertical position of the input field relative to the bottom of the screen
        //        var windowHeight = $(window).height();
        //        var inputPosition = inputField.offset().top + inputField.outerHeight();
        //        var positionPercentage = ((windowHeight - inputPosition) / windowHeight) * 100;
        //        console.log(positionPercentage);

        //        //container.style.cssText = "top: " + 60 + "% ; width:auto;";
        //        /* checkMatchingBook();*/
        //        //getselectedBook(valu);
        //        /*append the DIV element as a child of the autocomplete container:*/
        //        this.parentNode.appendChild(container);
        //        //document.appendChild(a);

        //        itemcontainer = document.createElement("ul");
        //        itemcontainer.setAttribute("class", "dropdown-menu show");
        //        //itemcontainer.setAttribute("aria-labelledby", inp.id + "-dropdown");
        //        /*for each item in the array...*/
        //        for (i = 0; i < arr.length; i++) {
        //            /*check if the item starts with the same letters as the text field value:*/
        //            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
        //                /*create a DIV element for each matching element:*/


        //                items = document.createElement("li");
        //                items.classList.add("dropdown-item");
        //                /*make the matching letters bold:*/
        //                items.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
        //                items.innerHTML += arr[i].substr(val.length);
        //                /*insert a input field that will hold the current array item's value:*/
        //                items.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
        //                /*execute a function when someone clicks on the item value (DIV element):*/
        //                items.addEventListener("click", function (e) {
        //                    /*insert the value for the autocomplete text field:*/
        //                    inp.value = this.getElementsByTagName("input")[0].value.split("/")[0];
        //                    $("#konyvname").text(() => {
        //                        return this.getElementsByTagName("input")[0].value.split("/")[1];
        //                    })
        //                    szidstart();
        //                    /* checkMatchingBook();*/
        //                    /*close the list of autocompleted values,
        //                    (or any other open lists of autocompleted values:*/
        //                    closeAllLists();
        //                });
        //                container.appendChild(itemcontainer);
        //                itemcontainer.appendChild(items);


        //            }
        //        }
        //    });




        //    /*execute a function presses a key on the keyboard:*/
        //    inp.addEventListener("keydown", function (e) {
        //        var x = document.getElementById(this.id + "autocomplete-list");
        //        if (x) x = x.getElementsByTagName("li");
        //        if (e.keyCode == 40) {
        //            /*If the arrow DOWN key is pressed,
        //            increase the currentFocus variable:*/
        //            currentFocus++;
        //            /*and and make the current item more visible:*/
        //            addActive(x);
        //        } else if (e.keyCode == 38) { //up
        //            /*If the arrow UP key is pressed,
        //            decrease the currentFocus variable:*/
        //            currentFocus--;
        //            /*and and make the current item more visible:*/
        //            addActive(x);
        //        }

        //        else if (e.keyCode == 13) {
        //            /*If the ENTER key is pressed, prevent the form from being submitted,*/
        //            e.preventDefault();
        //            if (currentFocus > -1) {
        //                /*and simulate a click on the "active" item:*/
        //                if (x) {

        //                    x[currentFocus].click();
        //                   // setTimeout("checkMatchingBook", 20);
        //                }
        //            }
        //        }
        //    });
        //    function addActive(x) {
        //        /*a function to classify an item as "active":*/
        //        if (!x) return false;
        //        /*start by removing the "active" class on all items:*/
        //        removeActive(x);
        //        if (currentFocus >= x.length) currentFocus = 0;
        //        if (currentFocus < 0) currentFocus = (x.length - 1);
        //        /*add class "autocomplete-active":*/
        //        x[currentFocus].classList.add("autocomplete-active");
        //    }
        //    function removeActive(x) {
        //        /*a function to remove the "active" class from all autocomplete items:*/
        //        for (var i = 0; i < x.length; i++) {
        //            x[i].classList.remove("autocomplete-active");
        //        }
        //    }
        //    function closeAllLists(elmnt) {
        //        /*close all autocomplete lists in the document,
        //        except the one passed as an argument:*/
        //        var x = document.getElementsByClassName("autocomplete-items");
        //        for (var i = 0; i < x.length; i++) {
        //            if (elmnt != x[i] && elmnt != inp) {
        //                x[i].parentNode.removeChild(x[i]);
        //            }
        //        }
        //    }
        //    /*execute a function when someone clicks in the document:*/
        //    document.addEventListener("click", function (e) {
        //        closeAllLists(e.target);
        //    });
        //}
            $("#szid").on("input", () => {
                szidstart();
                
            });
        $("#szid").change( () => {
            szidstart();
        });
        function szidstart() {
            var szidval = document.getElementById("szid").value;
            console.log("something happened!!")

            console.log("df");
            if (szidval.length >= 3) {
                var stuff = document.getElementsByName(".hiddenszid");
                for (var i = 0; i < stuff.length; i++) {
                    // stuff[i].value = szidval;
                }
                myfunction(szidval);
            }
        }
        //autocomplete(document.getElementById("szid"), all_Reader);
            function myfunction(val) {
                console.log($("#szid").value);
                $.ajax({
                    url: "/Default/SetSession",
                    type: "POST",
                    data: { 'name': "currentreadercard", 'value': val },
                    success: function () {
                        document.getElementById("borrowinguser").value = val;

                        $.ajax({
                            url: "/Default/GetReaderCard",
                            type: "GET",
                            data: "",
                            success: function (data) {

                                document.getElementById("userdata").innerHTML = data;
                            },
                            error: function () { alert("error"); }
                        });
                        document.getElementById("userdata").innerHTML = "";
                    },
                    error: function () { alert("error"); }
                });
        }
</script>


