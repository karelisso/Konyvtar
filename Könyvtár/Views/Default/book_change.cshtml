@{
    konyv[] km;
    Writer[] wrt;
    Categories[] crt;
    using (book_vs19Entities1 bullshit = new book_vs19Entities1())
    {
        wrt = bullshit.Writer.ToArray();
        crt = bullshit.Categories.ToArray();
        km = bullshit.konyv.ToArray();
    }
}

<form action="CreateBook" method="post" enctype="multipart/form-data" class="text-white mx-3 py-3" onsubmit="return confirm( 'Biztos, hogy rögzíteni akarod?' );">


    <div class="autocomplete text-dark">
        <label class="col-6 h4 text-white">ISBN code</label> <br>   <input id="isbn" class="col-6" type="type" name="isbn" value="" maxlength="13" required autocomplete="off" onkeydown="AutocompleteBook()"/> <br />
    </div>
    <label class="col-6 h4"> Szerző </label>  
    <div class="autocomplete text-dark">
        <input type="type" name="auth" class="col-6" value="" id="Szerzo" placeholder="" autocomplete="off" /> <br>
    </div>
    <label class="col-6 h4">Cím</label> <br>  <input id="bookname" class="col-6" type="type" name="name" value="" autocomplete="off" /> <br />
    @*<label class="col-6 h4">Beszerzés dátuma</label> <br>  <input class="col-6" type="date" name="date" value="" maxlength="10" autocomplete="off" /> <br />
    <label class="col-6 h4">Darabszám</label> <br>  <input class="col-6" type="number" name="quantity" value="1" required autocomplete="off" /> <br />*@
    @*<label>Boritó kép</label><input type="file" accept="image/*" name="img" /> <br />*@

    <label class="col-6 h4">Kategória</label>

    @*todo: change it to work like Szerzo then the popup a message contains every new data (writer,categoreies ) then create a list of categories*@
    <div class="autocomplete text-dark ">
        <input type="type" name="categori" class="col-6" value="" id="Categories" placeholder="" autocomplete="nope" />
    </div>
    <input class="col-6" id="livesearchtags" name="livesearchtags" placeholder="Search" autocomplete="off" hidden />
    <div id="result" class="tag-results">


        <input type="submit" name="btnSubmit" class="btn btn-info bg-opacity-100 text-white" value="Hozzáadás" />
</form>
<script>
        var all_isbn = []
        @foreach (var item in km)
        {
                string varrrr = $"{item.ISBN.Trim()}/{item.name}";

                @:{ all_isbn.push("@varrrr.Trim()") ;}
        }
        var all_Writer = []
        @foreach (var item in wrt)
        {
            string varrrr = item.writer_name ;

           @:{ all_Writer.push("@varrrr.Trim()") };
        }
        var all_categories =[]
        @foreach (var item in crt)
        {
            string varrrr = item.Name;

           @:{ all_categories.push("@varrrr.Trim()") };
        }



    document.getElementById('livesearchtags').addEventListener('keyup', function (e) {
        //Run LiveSearch on ever key up
        //LiveSearch()
    });
    var returntext = "fds";
    function LiveSearch() {
        //Get the input value
        let value = document.getElementById('livesearchtags').value

        $.ajax({
            type: "POST",
            // You can use the absolute url eg www.site.com/MyControllerName/LiveTagSearch or the relative path live below
            url: "/Default/LiveTagSearch",
            // Attach the value to a parameter called search
            data: { search: value },
            datatype: "html",
            success: function (data) {
                // Insert the returned search results html into the result element
                $('#result').html(data);
            }
        });
    }

    function AutocompleteBook() {
        $.ajax({
            url: '/Default/Book?search=' + document.getElementById('isbn').value+'///', // Change the URL to the action method that returns the book data
            type: 'GET',
            success: function (data) {
                // Loop through the book data and create rows for the table
                console.log(data)
                $("#Szerzo").val(data.item[0].writer_name);
                $("#bookname").val(data.item[0].k.name);
                $("#Categories").val(data.item[0].categori);
                //$.each(data, function (i, item) {
                //    var $row = $('<tr>').append(
                //        $('<td>').text(item.ISBN),
                //        $('<td>').text(item.Name),
                //        $('<td>').text(item.Writer)
                //    );
                //    $('#bookTableBody').append($row);
                //});
            },
            error: function () {

            }
        });
    }
    function szidstart() {
        AutocompleteBook();
    }
    autocomplete(document.getElementById("isbn"), all_isbn);
    autocomplete(document.getElementById("Szerzo"), all_Writer);
    autocomplete(document.getElementById("Categories"), all_categories);
</script>
