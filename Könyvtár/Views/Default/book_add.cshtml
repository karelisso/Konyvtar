@{
    konyv km = new konyv();
    Writer[] wrt;
    Categories[] crt;
    using (book_vs19Entities1 bullshit = new book_vs19Entities1())
    {
        wrt = bullshit.Writer.ToArray();
        crt = bullshit.Categories.ToArray();
    }
}

<form action="CreateBook" method="post" enctype="multipart/form-data" class="text-white" onsubmit="return confirm('Biztos hogy be akarod vinni ezt a könyvet az állományba');">
    <label>Szerző</label>
    <div class="autocomplete text-dark ">
        <input type="type" name="auth" value="" id="Szerzo" required placeholder="Country"  autocomplete="nope"/>
    </div>
    <br>
    @*<select name="auth">
        @foreach (var item in wrt)
        {
            <option value="@item.Id">@item.writer_name</option>
        }
    </select>*@
    <label>Cím</label>  <input type="type" name="name" value="" required autocomplete="off" /> <br />
    <label>ISBNcode</label><input type="type" name="isbn" value="" maxlength="11" required autocomplete="off" /> <br />
    <label>Beszerzés dátuma</label>  <input type="type" name="date" value="" maxlength="10" required autocomplete="off" /> <br />
    <label>Darabszám</label>  <input type="number" name="quantity" value="" required autocomplete="off" /> <br />
    @*<label>AUTH int only!!!!</label><input type="number" name="auth" value="0" required/> <br />*@
    @*<label>Boritó kép</label><input type="file" accept="image/*" name="img" required /> <br />  all image types
        <label>Összefoglaló</label><input type="text" name="demo" autocomplete="off" /> <br />*@
    <label>Kategoria</label>

    <select name="categori" required>
        @foreach (var item in crt)
        {
            <option value="@item.Id">@item.Name</option>
        }

    </select>
    <br>

    <input id="livesearchtags" name="livesearchtags" placeholder="Search" autocomplete="off" hidden />
    <div id="result" class="tag-results">


        <input type="submit" name="btnSubmit" value="hozzáadás" />
</form>
<script>
    var all_Writer = []
    @foreach (var item in wrt)
    {
        string varrrr = item.writer_name ;

       @:{ all_Writer.push("@varrrr.Trim()") };
    }

    console.log(all_Writer)
    document.getElementById('livesearchtags').addEventListener('keyup', function (e) {
        //Run LiveSearch on ever key up
        //LiveSearch()
    });

    function LiveSearch() {
        //Get the input value
        let value = document.getElementById('livesearchtags').value

        $.ajax({
            type: "POST",
            // You can use the absolute url eg www.site.com/MyControllerName/LiveTagSearch or the relative path live below
            url: "/Default/LiveTagSearch",
            // Attach the value to a parameter called search
            data: { search: value },
            datatype: "html",
            success: function (data) {
                // Insert the returned search results html into the result element
                $('#result').html(data);
            }
        });
    }

    function autocomplete(inp, arr) {
        console.log("fsdf")
    /*the autocomplete function takes two arguments,
the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function (e) {
        var a, b, i, val = this.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists();
        if (!val) { return false; }
        currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", this.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        /*append the DIV element as a child of the autocomplete container:*/
        this.parentNode.appendChild(a);
        /*for each item in the array...*/
        for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                b.innerHTML += arr[i].substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function (e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    /*close the list of autocompleted values,
                    (or any other open lists of autocompleted values:*/
                    closeAllLists();
                });
                a.appendChild(b);
            }
        }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function (e) {
        var x = document.getElementById(this.id + "autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
                /*and simulate a click on the "active" item:*/
                if (x) x[currentFocus].click();
            }
        }
    });
    function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
        }
    }
    function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
            if (elmnt != x[i] && elmnt != inp) {
                x[i].parentNode.removeChild(x[i]);
            }
        }
    }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function (e) {
        closeAllLists(e.target);
    });
}



    autocomplete(document.getElementById("Szerzo"), all_Writer);
</script>
