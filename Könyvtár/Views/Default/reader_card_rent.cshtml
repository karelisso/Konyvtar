@{
    //Layout = null;
    book_vs19Entities1 bullshit = new book_vs19Entities1();
    //UsersEntities dogpile = new UsersEntities();
    konyv[] kv;
    KonyvPeldany[] kmp;
    user[] ur = bullshit.user.ToArray();
    kmp= bullshit.KonyvPeldany.ToArray();
    kv = bullshit.konyv.ToArray();
    Reader_Card[] cr = bullshit.Reader_Card.ToArray();
    Reader_Card rc;
    List<Rent> rent = new List<Rent>();
    int puinishment = 0;
    //int sessionuid = int.Parse(Session["userid"].ToString());
    //if(Session["currentreadercard"] != null) { sessionuid = int.Parse(Session["currentreadercard"].ToString()); }
    //rc = bullshit.Reader_Card.Where(q => q.User_ID == sessionuid).FirstOrDefault();
    //if (rc != null)
    //{
    //    //rent = bullshit.Rent.Where(q => q.Card_ID == rc.User_ID).ToList();
    //    rent = bullshit.Rent.ToList();
    //}
    rent = bullshit.Rent.ToList();
    // Session["readerCard"] != null ? bullshit.Reader_Card.First(q => q.Personel_ID_Card.Equals(Session["readerCard"].ToString())).User_ID : "1132141";
    int? current;
        if (Session["currentreadercard"] != null && Session["currentreadercard"].ToString().Length > 0)
    {
        string curuser = Session["currentreadercard"].ToString();

        current = bullshit.Reader_Card.First(q => q.Personel_ID_Card.Equals(curuser)).User_ID;
        //current = bullshit.Reader_Card.First().User_ID;
    }
    else
    {
        current = -1;// bullshit.Reader_Card.First().User_ID;
    }
    string bookk = "0";
    //int? current = bullshit.Reader_Card.First(q=>q.Personel_ID_Card.Equals("1132141")).User_ID;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
</head>
<body>
    <header>
        <div style="height:10px"></div>
        <h1 class="float-lg-end text-white pt-5 align-self-sm-center float-sm-none">
            Jelenleg: Kölcsönzés
        </h1>
    </header>
    <div>
        <div id="Addiptive">
            @*<h3 class="opacity-100 text-white ">Kölcsönzés</h3>*@
            <!--<form action="CreateRent" method="post" enctype="multipart/form-data" class="text-white" onsubmit="return confirm('Biztos hogy ki akarod kölcsönözni ezt a könyvet az állományból');">-->
            @*<label>Könyv</label>
            <select name="name">
                @foreach (var item in km)
                {
                    <option value="@item.Id">@item.name</option>
                }

            </select>
            <input id="livesearchtags" name="livesearchtags" placeholder="Search" autocomplete="off" hidden />*@
            @*@RenderPage("book_render.cshtml")*@
            <!--<div class="autocomplete text-dark ">
                <input type="type" name="name" value="" id="konv" required placeholder="" autocomplete="nope" />
            </div>
            <div id="result" class="tag-results"> </div>
            <input type="submit" name="btnSubmit" value="kikölcsönzés" />
        </form>-->
            <table class="w-100 text-white">

                <thead>
                    <tr>

                        <td class="col-3"><label>Személyi igazolvány szám:</label>    </td>
                        <td class="col-9">
                            <input class="" type="text" id="szid" autocomplete="off" />

                            @*<form action="RenderReaderDetails">
                    <input type="submit" value="keresés" />
                    </form>*@
                        </td>
                    </tr>
                </thead>
                <tbody id="userdata">
                    @if (@bullshit.user.Count(q => q.user_id == current) > 0 &&current >= 0)
                    {
                        <tr>
                            <td> <label>Név:</label>  </td>
                            <td>  @bullshit.user.First(q => q.user_id == current).Username  </td>
                        </tr>

                        <tr>
                            <td>  <label>Lakcím:</label>  </td>
                            <td>  @bullshit.Reader_Card.First(q => q.User_ID == current).Birtpalace  </td>
                        </tr>
                        <tr>
                            <td> <label>Tel:</label>   </td>
                            <td>  @bullshit.User_sus.First(q => q.Id == current).phone  </td>
                        </tr>
                        <tr>
                            <td>  <label>E-mail cím:</label>   </td>
                            <td>  @bullshit.User_sus.First(q => q.Id == current).email </td>
                        </tr>
                    }
                    else
                    {
                        <tr> 
                            <td>Nincs ilyen olvasó fölvéve</td> 
                        </tr>
                    }
                </tbody>


            </table>
            <table class="table table-responsive-md  table-bordered text-light text-center justify-content-center" id="tablfull">

                <thead style="position: sticky;top: 0">

                    <tr class="text-dark bg-warning">
                        <td> <strong>ISBN</strong>  </td>
                        <td><strong>könyv címe</strong> </td>
                        <td> <strong>Személyi igazolvány</strong>  </td>
                        <td><strong>kölcsönadás ideje</strong> </td>
                        <td><strong>visszavétel ideje</strong> </td>
                        <td><strong>visszavétel hatálya</strong> </td>
                        <td><strong>adatok rögzitése</strong> </td>
                        @*<td> <strong>Darab</strong> </td>*@
                    </tr>

                </thead>
                <tbody>
                    <form action="CreateRent" method="post">
                    <tr>
                        <input value="@current" name="szid" hidden class="hiddenszid" id="borrowinguser" autocomplete="off">

                        @*<td><input type="text" required id="konv" name="username"></td>*@
                        <td><input type="text" required id="konv" name="book_id"></td>
                        <td id="konyvname"></td>
                        <td>--</td>
                        <td><input type="date" required name="date"></td>
                        <td>@*<input type="date" readonly>*@         </td>
                        <td>@*<input type="date" readonly>*@         </td>
                        <td><input type="submit" value="Rögzités"> </td>
                    </tr>

                    </form>

                    @foreach (var item3 in rent.Where(q => !q.Return_Date.HasValue))
                    {
                        <form action="delRent" method="post">
                            <tr>
                                <td>
                                    @item3.Book_ID <input type="text" readonly value="@item3.Book_ID" name="bookid" hidden>   @{ bookk = item3.Book_ID.Split(';')[0]; }
                                    <input value="@item3.Book_ID" name="bookid" hidden>
                                </td>
                                <td> @bullshit.konyv.FirstOrDefault(q => q.ISBN == bookk).name  </td>
                                <td> @bullshit.Reader_Card.First(q => q.IdReaderCard.Equals(item3.Card_ID)).Personel_ID_Card</td>
                                <td> @item3.Rent_Date </td>
                                <td> <input type="date" required name="date"> </td>
                                <td> @item3.Due_Date </td>
                                <td> <input type="submit" value="Rögzités"> </td>
                            </tr>
                        </form>
                        }
                    </tbody>

                    @* find every active table row, use the id from the table to delete it from the datbase! *@
                </table>
            </div>

        <script>
        var all_Writer = []
            @*@foreach (var item in kmp.Where(q => !q.RemovedTime.HasValue))
            {
                if (rent.Count(q=>q.Book_ID.Equals((item.book_id + ";" + item.PeldanyId))) <= 0 )
                {
                    string varrrr = $"{item.book_id.Trim()};{item.PeldanyId}/{kv.First(q=>q.ISBN.Equals(item.book_id)).name}";

                    @:{ all_Writer.push("@varrrr.Trim()") ;}

                }


            }*@
        @foreach (var item in kmp.Where(q => !q.isBorrowed))
            {
                    string varrrr = $"{item.book_id.Trim()};{item.PeldanyId}/{kv.First(q=>q.ISBN.Equals(item.book_id)).name}";

                    @:{ all_Writer.push("@varrrr.Trim()") ;}
            }
             var all_Reader = []
            @foreach (var item in cr)
            {
                string varrrr = $"{item.Personel_ID_Card}";

               @:{ all_Reader.push("@varrrr.Trim()") };
            }


            $("#szid").on("input", () => {
                szidstart();
                //
            });

        $("#szid").change( () => {
            szidstart();
        });
        function szidstart() {
            var szidval = document.getElementById("szid").value;
            console.log("something happened!!")

            console.log("df");
            if (szidval.length >= 3) {
                var stuff = document.getElementsByName(".hiddenszid");
                for (var i = 0; i < stuff.length; i++) {
                    // stuff[i].value = szidval;
                }
                myfunction(szidval);
            }
        }
            autocomplete(document.getElementById("konv"), all_Writer);

        autocomplete(document.getElementById("szid"), all_Reader);

            function pageNext(nextpage) {
                var pagecurrent = parseInt($("#currentpage").text());
                var pagemax = parseInt($("#maxpage").text());
                pagecurrent += nextpage;
                if (pagecurrent > pagemax) pagecurrent = pagemax;
                else if (pagecurrent < 1) pagecurrent = 1;
                $("#currentpage").text(pagecurrent);
                $.ajax({
                    url: "/Default/GetLogBook",
                    type: "GET",
                    data: { 'page': pagecurrent },
                    success: function (data) {
                        var tabledata = "";
                        data.forEach(function (invdata) {
                            console.log(invdata);
                            var milliseconds = parseInt(invdata.logdata.when.replace(/\/Date\((\d+)\)\//, '$1'));
                            var date = new Date(milliseconds);
                            tabledata += "<tr>"
                            tabledata += "<td>" + invdata.logdata.who + "</td>";
                            tabledata += "<td>" + date + "</td>";
                            tabledata += "<td>" + invdata.logtext.text + "</td>";
                            tabledata += "<td>" + invdata.logdata.whom + "</td>";

                            tabledata += "</tr>"
                        });
                        $("tbody").html(tabledata);
                    },
                    error: function () { alert("error"); }
                });
            }

            function myfunction(val) {
                console.log($("#szid").value);
                $.ajax({
                    url: "/Default/SetSession",
                    type: "POST",
                    data: { 'name': "currentreadercard", 'value': val },
                    success: function () {
                        document.getElementById("borrowinguser").value = val;

                        $.ajax({
                            url: "/Default/GetReaderCard",
                            type: "GET",
                            data: "",
                            success: function (data) {

                                document.getElementById("userdata").innerHTML = data;
                            },
                            error: function () { alert("error"); }
                        });
                        document.getElementById("userdata").innerHTML = "";
                    },
                    error: function () { alert("error"); }
                });
        }
        </script>

        </div>
</body>
</html>
