@{
    konyv[] km;
    KonyvPeldany[] kmp;
    Writer[] wrt;
    Categories[] crt;
    using (book_vs19Entities1 bullshit = new book_vs19Entities1())
    {
        wrt = bullshit.Writer.ToArray();
        kmp = bullshit.KonyvPeldany.ToArray();
        crt = bullshit.Categories.ToArray();
        km = bullshit.konyv.ToArray();
    }
}
<form action="Delbooks" method="post" enctype="multipart/form-data" class="text-white" onsubmit="return confirm('Biztos hogy Törölni szeretnéd ezt a könyvet az állományból');">


    <div class="autocomplete text-dark ">
        <input type="type" name="name" value="" id="konv" required placeholder="Country" autocomplete="nope" />
    </div>
    <div id="result" class="tag-results"> </div>
    <input type="submit" name="btnSubmit" value="Törlés" />
</form>
<table class="table table-responsive-md table-bordered text-light" id="tablfull">

    <thead style="position: sticky;top: 0">

        <tr class="text-dark bg-warning">
            <td class=""> <strong>ID</strong>   </td>
            <td> <strong>ISBN</strong>  </td>
            <td><strong>Szerző</strong> </td>
            <td><strong>cím</strong> </td>
            <td><strong>Kategoria</strong> </td>
            <td> <strong>Darab</strong> </td>
        </tr>

    </thead>
    <tbody id="booktable">
        @*foreach (var item in AllBook)
            {
                <tr class="clickable-table">
                    <td>item.Id </td>
                    <td>item.ISBN</td>
                    <td> AllWriter.Where(q => q.Id == item.authorId).FirstOrDefault().writer_name </td>
                    <td>item.name</td>
                    <td> <img src="/Default/Load_Image_File_Id/item.imageID" alt="Alternate Text" height="50px" /> </td>
                    <td> item.Available_Quantity <input type="number" min="0" name="name" value="item.Available_Quantity" /> </td>
                </tr>
            }*@
    </tbody>

    @* find every active table row, use the id from the table to delete it from the datbase! *@
</table>

<script>
    document.getElementById('konv').addEventListener('keyup', function (e) {
        //Run LiveSearch on ever key up
        //LiveSearch()
        checkMatchingBook();
    });
  
    function getselectedBook(vall) {
        //Get the input value
        let value = vall;

        $.ajax({
            type: "POST",
            // You can use the absolute url eg www.site.com/MyControllerName/LiveTagSearch or the relative path live below
            url: "/Default/RenderBookItem",
            // Attach the value to a parameter called search
            data: { isbn: value },
            datatype: "html",
            success: function (data) {
                // Insert the returned search results html into the result element
                $('#booktable').html(data);
            }
        });
    }
    var isbookmatch = false; 

    function checkMatchingBook() {
        let valu = document.getElementById('konv').value;
        console.log(valu);
        if (all_Writer.indexOf(valu) !== -1 && isbookmatch) {
            console.log("siker")
            getselectedBook(valu);
            isbookmatch = false;
            $("#tablfull").show();
        }
        else {
            isbookmatch = true;
            $("#tablfull").hide();
        }
    }
        var all_Writer = []
    @foreach (var item in kmp.Where(q => !q.RemovedTime.HasValue))
    {
        string varrrr = $"{item.book_id.Trim()};{item.PeldanyId}";

       @:{ all_Writer.push("@varrrr.Trim()") };
    }





    function autocomplete(inp, arr) {
        console.log("fsdf")
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var container, items, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            container = document.createElement("DIV");
            container.setAttribute("id", this.id + "autocomplete-list");
            container.setAttribute("class", "autocomplete-items");



            container.classList.add("text-dark");
            container.classList.add("dropdown");
            container.classList.add("show");

            // Get the input field
            var inputField = $("#" + inp.id);

            // Get the vertical position of the input field relative to the bottom of the screen
            var windowHeight = $(window).height();
            var inputPosition = inputField.offset().top + inputField.outerHeight();
            var positionPercentage = ((windowHeight - inputPosition) / windowHeight) * 100;
            console.log(positionPercentage);

            //container.style.cssText = "top: " + 60 + "% ; width:auto;";
            /* checkMatchingBook();*/
            //getselectedBook(valu);
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(container);
            //document.appendChild(a);

            itemcontainer = document.createElement("ul");
            itemcontainer.setAttribute("class", "dropdown-menu show");
            container.appendChild(itemcontainer);
            //itemcontainer.setAttribute("aria-labelledby", inp.id + "-dropdown");
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    items = document.createElement("li");
                    /*make the matching letters bold:*/
                    items.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    items.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    items.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    items.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    itemcontainer.appendChild(items);
                }
            }
        });




        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("li");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) {
                       
                        x[currentFocus].click();
                        setTimeout("checkMatchingBook", 200);
                    }
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }



    autocomplete(document.getElementById("konv"), all_Writer);



</script>
