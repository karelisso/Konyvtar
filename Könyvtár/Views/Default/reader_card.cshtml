@{
    //Layout = null;
    book_vs19Entities1 bullshit = new book_vs19Entities1();
    //UsersEntities dogpile = new UsersEntities();
    konyv[] kv;
    KonyvPeldany[] kmp;
    user[] ur = bullshit.user.ToArray();
    kmp= bullshit.KonyvPeldany.ToArray();
    kv = bullshit.konyv.ToArray();
    Reader_Card[] cr = bullshit.Reader_Card.ToArray();
    Reader_Card rc;
    List<Rent> rent = new List<Rent>();
    int puinishment = 0;
    //int sessionuid = int.Parse(Session["userid"].ToString());
    //if(Session["currentreadercard"] != null) { sessionuid = int.Parse(Session["currentreadercard"].ToString()); }
    //rc = bullshit.Reader_Card.Where(q => q.User_ID == sessionuid).FirstOrDefault();
    //if (rc != null)
    //{
    //    //rent = bullshit.Rent.Where(q => q.Card_ID == rc.User_ID).ToList();
    //    rent = bullshit.Rent.ToList();
    //}
    rent = bullshit.Rent.ToList();
    // Session["readerCard"] != null ? bullshit.Reader_Card.First(q => q.Personel_ID_Card.Equals(Session["readerCard"].ToString())).User_ID : "1132141";
    int? current;
        if (Session["currentreadercard"] != null && Session["currentreadercard"].ToString().Length > 0)
    {
        string curuser = Session["currentreadercard"].ToString();

        current = bullshit.Reader_Card.First(q => q.Personel_ID_Card.Equals(curuser)).User_ID;
        //current = bullshit.Reader_Card.First().User_ID;
    }
    else
    {
        current = -1;// bullshit.Reader_Card.First().User_ID;
    }
    string bookk = "0";
    //int? current = bullshit.Reader_Card.First(q=>q.Personel_ID_Card.Equals("1132141")).User_ID;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
</head>
<body>
    <header>
        <h1 class="float-end text-white">
            Jelenleg: Kölcsönzés
        </h1>
    </header>
    <div>
        <h1 class="fixed-bottom bg-black bg-opacity-50 w-100 row">
            <button class="col-6 btn btn-success" onclick="enableAdd()">kölcsönzés</button>
            @* <button class="col-4">Állomány modosÍtása</button> *@
            <button class="col-6 btn btn-dark" " onclick="enableDell()">új olvasó felvétele</button>
        </h1>
        <div id="Dell">
            <form action="CreateReader" method="post" class="text-white bg-dark bg-opacity-50">
                <h3 class="opacity-100">Olvasó felvétele</h3>


                <table class="w-100">
                    <tr>
                        <td> <label>Név</label>  </td>
                        <td> <input type="text" name="name" value="" autocomplete="off" />   </td>
                    </tr>
                    <tr>
                        <td> <label>Annya neve</label>  </td>
                        <td> <input type="text" name="name2" value="" autocomplete="off" />   </td>

                    </tr>

                    <tr>
                        <td class="col-3"> <label>Születés hely</label>    </td>
                        <td class="col-9"> <input type="type" name="birthpalace" value="" maxlength="10" required autocomplete="off" /> </td>
                    </tr>

                    <tr>
                        <td class="col-3"> <label>Születés dátuma</label>    </td>
                        <td class="col-9"> <input type="type" name="birthday" value="" maxlength="10" required autocomplete="off" /> </td>
                    </tr>


                    <tr>
                        <td class="col-3"><label>Személyi igazolvány szám</label>    </td>
                        <td class="col-9">  <input class="w-100" type="text" name="szid" value="" autocomplete="off" /> </td>
                    </tr>
                    <tr>
                        <td>  <label>lakcím</label>  </td>
                        <td>  <input type="text" name="home" value="" autocomplete="off" />  </td>
                    </tr>
                    <tr>
                        <td> <label>tel</label>   </td>
                        <td>   <input type="tel" name="phone" value="" autocomplete="off" /> </td>
                    </tr>
                    <tr>
                        <td>  <label>Email cím</label>   </td>
                        <td>  <input type="email" name="mail" value="" autocomplete="off" />  </td>
                    </tr>
                    <tr>
                        <td>  <label>jelszó</label>  </td>
                        <td>  <input type="password" name="Upp" required autocomplete="off" /> </td>
                    </tr>
                    <tr>
                        <td>   <label>jelszó megerősítése</label>  </td>
                        <td>  <input type="password" name="UppR" required /> </td>
                    </tr>
                </table>

                @*<br />
                 <br />
                  <br />
                 <br />
                <br />
                 <div class="col-md-6 mb-4 text-white" ">
                     <label>jelszó</label> <input type="password" name="Upp" required />
                 </div>
                 <div class="col-md-6 mb-4">
                     <div class="form-outline text-white" ">
                         <label>jelszó megerősítése</label> <input type="password" name="UppR" required />
                     </div>
                 </div>*@
                <input type="submit" name="no" value="regisztrál" />

            </form>
        </div>
        @*this is for rent_cards*@


        @* this is for rents*@


        @*<form action="CreateRent" method="post" class="text-white bg-info bg-opacity-50">
                <h3 class="opacity-100">Kölcsönzés</h3>
                <label>Név</label>  <select name="id" onchange="myFunction()">
        @foreach (var item in cr)
        {
            user me = bullshit.user.FirstOrDefault(q => q.id == item.User_ID);

            if (me != null)
            {
                <option value="@item.User_ID">  @me.Username</option>
            }
        }

            </select><br />
                <label>könyv</label>  <select name="book_id">
                    @foreach (var item2 in kv)
                    {
                        <option value="@item2.Id">@item2.name @item2.Available_Quantity</option>
                    }

                </select><br />
                <input type="submit" name="no" value="hozzáadás" />
            </form>*@
        <div id="Addiptive">
            <h3 class="opacity-100 text-white ">Kölcsönzés</h3>
            <!--<form action="CreateRent" method="post" enctype="multipart/form-data" class="text-white" onsubmit="return confirm('Biztos hogy ki akarod kölcsönözni ezt a könyvet az állományból');">-->
            @*<label>Könyv</label>
            <select name="name">
                @foreach (var item in km)
                {
                    <option value="@item.Id">@item.name</option>
                }

            </select>
            <input id="livesearchtags" name="livesearchtags" placeholder="Search" autocomplete="off" hidden />*@
            @*@RenderPage("book_render.cshtml")*@
            <!--<div class="autocomplete text-dark ">
                <input type="type" name="name" value="" id="konv" required placeholder="" autocomplete="nope" />
            </div>
            <div id="result" class="tag-results"> </div>
            <input type="submit" name="btnSubmit" value="kikölcsönzés" />
        </form>-->
            <table class="w-100 text-white">

                <thead>
                    <tr>

                        <td class="col-3"><label>Személyi igazolvány szám</label>    </td>
                        <td class="col-9">
                            <input class="w-100" type="text" id="szid" autocomplete="off" />

                            @*<form action="RenderReaderDetails">
                    <input type="submit" value="keresés" />
                    </form>*@
                        </td>
                    </tr>
                </thead>
                <tbody id="userdata">
                    @if (@bullshit.user.Count(q => q.user_id == current) > 0 &&current >= 0)
                    {
                        <tr>
                            <td> <label>Név</label>  </td>
                            <td>  @bullshit.user.First(q => q.user_id == current).Username  </td>
                        </tr>

                        <tr>
                            <td>  <label>lakcím</label>  </td>
                            <td>  @bullshit.Reader_Card.First(q => q.User_ID == current).Birtpalace  </td>
                        </tr>
                        <tr>
                            <td> <label>tel</label>   </td>
                            <td>  @bullshit.User_sus.First(q => q.Id == current).phone  </td>
                        </tr>
                        <tr>
                            <td>  <label>Email cím</label>   </td>
                            <td>  @bullshit.User_sus.First(q => q.Id == current).email </td>
                        </tr>
                    }
                    else
                    {
                        <tr> 
                            <td>Nincs ilyen olvasó fölvéve</td> 
                        </tr>
                    }
                </tbody>


            </table>
            <table class="table table-bordered text-light" id="tablfull">

                <thead style="position: sticky;top: 0">

                    <tr class="text-dark bg-warning">
                        <td> <strong>ISBN</strong>  </td>
                        <td><strong>könyv címe</strong> </td>
                        <td> <strong>Kiadva</strong>  </td>
                        <td><strong>kölcsönadás ideje</strong> </td>
                        <td><strong>visszavétel ideje</strong> </td>
                        <td><strong>visszavétel hatálya</strong> </td>
                        <td><strong>adatok rögzitése</strong> </td>
                        @*<td> <strong>Darab</strong> </td>*@
                    </tr>

                </thead>
                <tbody>
                    <form action="CreateRent" method="post">
                    <tr>
                        <input value="@current" name="szid" hidden class="hiddenszid" id="borrowinguser">

                        @*<td><input type="text" required id="konv" name="username"></td>*@
                        <td><input type="text" required id="konv" name="book_id"></td>
                        <td id="konyvname"></td>
                        <td>--</td>
                        <td><input type="date" required name="date"></td>
                        <td>@*<input type="date" readonly>*@         </td>
                        <td>@*<input type="date" readonly>*@         </td>
                        <td><input type="submit" value="Rögzités"> </td>
                    </tr>

                    </form>

                    @foreach (var item3 in rent.Where(q => !q.Return_Date.HasValue))
                    {
                        <form action="delRent" method="post">
                            <tr>
                                <td>
                                    @item3.Book_ID <input type="text" readonly value="@item3.Book_ID" name="bookid" hidden>   @{ bookk = item3.Book_ID.Split(';')[0]; }
                                    <input value="@item3.Book_ID" name="bookid" hidden>
                                </td>
                                <td> @bullshit.konyv.FirstOrDefault(q => q.ISBN == bookk).name  </td>
                                <td> @bullshit.Reader_Card.First(q => q.IdReaderCard.Equals(item3.Card_ID)).Personel_ID_Card</td>
                                <td> @item3.Return_Date </td>
                                <td> <input type="date" required name="date"> </td>
                                <td> @item3.Due_Date </td>
                                <td> <input type="submit" value="Rögzités"> </td>
                            </tr>
                        </form>
                        }
                    </tbody>

                    @* find every active table row, use the id from the table to delete it from the datbase! *@
                </table>
            </div>


            <!--<table class="table table-bordered text-light">-->
            @*<tr>
                <td>Név:</td>
                <td>@(Session["username"]) </td>
            </tr>*@
            @*<tr>
                <td>Kölcsönzések:</td>
            </tr>*@
            @*@if (rc == null)
            {
                <tr> jelenleg nincs Olvasokártya </tr>
            }*@
            <!--<tr>
                <td>Könyv azonositó</td>
                <td>kölcsönzés ideje</td>
                <td>vissza adás határideje</td>
                <td>visszavitel ideje</td>
            </tr>



        </table>-->

    <script>
        var all_Writer = []
            @foreach (var item in kmp.Where(q => !q.RemovedTime.HasValue))
            {
                if (rent.Count(q=>q.Book_ID.Equals((item.book_id + ";" + item.PeldanyId))) <= 0 )
                {
                    string varrrr = $"{item.book_id.Trim()};{item.PeldanyId}/{kv.First(q=>q.ISBN.Equals(item.book_id)).name}";

                    @:{ all_Writer.push("@varrrr.Trim()") ;}

                }


            }

             var all_Reader = []
            @foreach (var item in cr)
            {
                string varrrr = $"{item.Personel_ID_Card}";

               @:{ all_Reader.push("@varrrr.Trim()") };
            }

        function autocomplete(inp, arr) {
            console.log("fsdf")
            /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                
                a.classList.add("text-dark");

                // Get the input field
                var inputField = $("#"+inp.id);

                // Get the vertical position of the input field relative to the bottom of the screen
                var windowHeight = $(window).height();
                var inputPosition = inputField.offset().top + inputField.outerHeight();
                var positionPercentage = ((windowHeight - inputPosition) / windowHeight) * 100;
                console.log(positionPercentage);
                
                a.style.cssText = "top: " + 60 + "% ; width:auto;";
                /* checkMatchingBook();*/
                //getselectedBook(valu);
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                //document.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value.split("/")[0];
                            $("#konyvname").text(() => {
                                return this.getElementsByTagName("input")[0].value.split("/")[1];
                            }) 
                            szidstart();
                            /* checkMatchingBook();*/
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });




            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) {

                            x[currentFocus].click();
                           // setTimeout("checkMatchingBook", 20);
                        }
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }


            $("#szid").on("input", () => {
                szidstart();
                //
            });

        $("#szid").change( () => {
            szidstart();
        });
        function szidstart() {
            var szidval = document.getElementById("szid").value;
            console.log("something happened!!")

            console.log("df");
            if (szidval.length >= 3) {
                var stuff = document.getElementsByName(".hiddenszid");
                for (var i = 0; i < stuff.length; i++) {
                    // stuff[i].value = szidval;
                }
                myfunction(szidval);
            }
        }
            autocomplete(document.getElementById("konv"), all_Writer);

        autocomplete(document.getElementById("szid"), all_Reader);



            function myfunction(val) {
                console.log($("#szid").value);
                $.ajax({
                    url: "/Default/SetSession",
                    type: "POST",
                    data: { 'name': "currentreadercard", 'value': val },
                    success: function () {
                        document.getElementById("borrowinguser").value = val;

                        $.ajax({
                            url: "/Default/GetReaderCard",
                            type: "GET",
                            data: "",
                            success: function (data) {

                                document.getElementById("userdata").innerHTML = data;
                            },
                            error: function () { alert("error"); }
                        });
                        document.getElementById("userdata").innerHTML = "";
                    },
                    error: function () { alert("error"); }
                });
        }

        $(document).ready(function () {
            $("#Dell").hide();
            $("#Addiptive").show();
            console.log("loadedd");
        })
        function enableAdd() {
            $("#Dell").hide();
            $("#Addiptive").show();
        }
        function enableDell() {
            $("#Dell").show();
            $("#Addiptive").hide();
        }
    </script>

        </div>
</body>
</html>
